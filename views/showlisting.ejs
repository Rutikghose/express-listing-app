<% layout('boilerplat') %>

<div class="container my-5">
    <div class="d-flex justify-content-end mb-3">
        <a href="/newlisting" class="btn btn-success">
            <i class="bi bi-plus-lg"></i> Create New Listing
        </a>
    </div>

    <div class="card mb-4 shadow">
        <div class="row g-0">
            <div class="col-md-5">
                <img src="<%= listing.image %>" class="img-fluid rounded-start h-100 object-fit-cover" alt="<%= listing.title %>">
            </div>
            <div class="col-md-7">
                <div class="card-body">
                    <h3 class="card-title mb-3"><%= listing.title %></h3>
                    <p class="card-text"><strong>Description:</strong> <%= listing.description %></p>
                    <p class="card-text"><strong>Price:</strong> â‚¹ <%= listing.price %></p>
                    <p class="card-text"><strong>Location:</strong> <%= listing.location %></p>
                    <p class="card-text"><strong>Country:</strong> <%= listing.country %></p>

                  
                        <div class="mt-4 d-flex gap-3">
                            <a href="/listing/<%= listing._id %>/edit" class="btn btn-primary">
                                <i class="bi bi-pencil-square"></i> Edit Listing
                            </a>

                            <form method="post" action="/listing/<%= listing._id %>?_method=DELETE" 
                                  onsubmit="return confirm('Are you sure you want to delete this listing?')">
                                <button type="submit" class="btn btn-danger">
                                    <i class="bi bi-trash"></i> Delete Listing
                                </button>
                            </form>
                        </div>
              
                </div>
            </div>
        </div>
    </div>

    <hr>

    <!-- Review Form -->
    <div class="row">
        <div class="col-8">
            <form method="POST" action="/listing/<%= listing._id %>/review" novalidate class="needs-validation">
                <label class="form-label">Select points of Review</label><br>
                <input type="range" name="Review[range]" min="1" max="5" class="form-range" required><br><br>  

                <label class="form-label">Comments</label><br>
                <textarea name="Review[comments]" class="form-control" required></textarea><br><br>

                <button type="submit" class="btn btn-primary">Upload Review</button>
            </form>
        </div>
    </div>

    <hr>

    <% if (listing.review.length > 0) { %>
        <h2>Reviews:</h2>
        <ul>
            <% listing.review.forEach((rev) => { %>
                <li>
                    Rating: <%= rev.rating %> / 5 <br>
                    Comment: <%= rev.comments %>
                    <% if (currentUser && (rev.author._id.toString() === currentUser._id.toString() || listing.owner.toString() === currentUser._id.toString())) { %>
                        <form method="post" action="/listing/<%= listing._id %>/review/<%= rev._id %>?_method=DELETE">
                            <button class="btn btn-success">Delete</button>
                        </form>
                    <% } %>
                </li>
            <% }) %>
        </ul>
    <% } %>
</div>

<!-- Map Section (unchanged) -->
<div class="container my-5">
    <h3>Location & Directions</h3>
    <div class="mb-3">
        <button id="getCurrentLocation" class="btn btn-info">
            <i class="bi bi-geo-alt"></i> Get My Current Location
        </button>
        <span id="locationStatus" class="ms-2 text-muted"></span>
    </div>
    <div id="map" style="height: 400px; width: 100%; border: 1px solid #ccc; border-radius: 5px;"></div>
</div>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script src="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.js"></script>

<script>
    let map;
    let userMarker = null;
    let destinationMarker = null;
    let routingControl = null;
    let destinationCoords = null;

    document.addEventListener("DOMContentLoaded", function () {
        initializeMap();
        geocodeDestination();
    });

    function initializeMap() {
        map = L.map('map').setView([20.5937, 78.9629], 5);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors',
            maxZoom: 19
        }).addTo(map);
    }

    function geocodeDestination() {
        const destinationAddress = "<%= listing.location %>, <%= listing.country %>";
        const statusElement = document.getElementById('locationStatus');
        statusElement.textContent = "Finding destination...";

        fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(destinationAddress)}&limit=1`)
            .then(response => response.json())
            .then(data => {
                if (data && data.length > 0) {
                    const destLat = parseFloat(data[0].lat);
                    const destLon = parseFloat(data[0].lon);
                    destinationCoords = [destLat, destLon];

                    if (destinationMarker) map.removeLayer(destinationMarker);
                    destinationMarker = L.marker([destLat, destLon], {
                        title: "<%= listing.title %>"
                    }).addTo(map);

                    destinationMarker.bindPopup(`
                        <strong><%= listing.title %></strong><br>
                        <%= listing.location %>, <%= listing.country %><br>
                        <small>Lat: ${destLat.toFixed(4)}, Lon: ${destLon.toFixed(4)}</small>
                    `);
                    map.setView([destLat, destLon], 10);
                    statusElement.textContent = "Destination found!";
                    statusElement.className = "ms-2 text-success";
                } else {
                    throw new Error("No results found");
                }
            })
            .catch(() => {
                statusElement.textContent = "Could not find destination";
                statusElement.className = "ms-2 text-danger";
            });
    }

    document.getElementById('getCurrentLocation').addEventListener('click', function() {
        const button = this;
        const statusElement = document.getElementById('locationStatus');
        
        if (!navigator.geolocation) {
            statusElement.textContent = "Geolocation not supported";
            statusElement.className = "ms-2 text-danger";
            return;
        }

        button.disabled = true;
        button.innerHTML = '<i class="spinner-border spinner-border-sm"></i> Getting location...';
        statusElement.textContent = "Getting your location...";
        statusElement.className = "ms-2 text-info";

        navigator.geolocation.getCurrentPosition(
            function(position) {
                const userLat = position.coords.latitude;
                const userLon = position.coords.longitude;

                if (userMarker) map.removeLayer(userMarker);
                userMarker = L.marker([userLat, userLon], { title: "Your Location" }).addTo(map);
                userMarker.bindPopup(`
                    <strong>Your Location</strong><br>
                    <small>Lat: ${userLat.toFixed(4)}, Lon: ${userLon.toFixed(4)}</small>
                `);

                if (destinationCoords) {
                    showRoute(userLat, userLon, destinationCoords[0], destinationCoords[1]);
                    const group = new L.featureGroup([userMarker, destinationMarker]);
                    map.fitBounds(group.getBounds().pad(0.1));
                } else {
                    map.setView([userLat, userLon], 13);
                }

                button.disabled = false;
                button.innerHTML = '<i class="bi bi-geo-alt"></i> Update My Location';
                statusElement.textContent = "Location found!";
                statusElement.className = "ms-2 text-success";
            },
            () => {
                statusElement.textContent = "Unable to get location";
                statusElement.className = "ms-2 text-danger";
                button.disabled = false;
                button.innerHTML = '<i class="bi bi-geo-alt"></i> Try Again';
            },
            { enableHighAccuracy: true, timeout: 10000, maximumAge: 60000 }
        );
    });

    function showRoute(startLat, startLon, endLat, endLon) {
        if (routingControl) map.removeControl(routingControl);
        routingControl = L.Routing.control({
            waypoints: [L.latLng(startLat, startLon), L.latLng(endLat, endLon)],
            routeWhileDragging: false,
            addWaypoints: false,
            createMarker: () => null,
            lineOptions: { styles: [{ color: '#007bff', weight: 4, opacity: 0.7 }] }
        }).addTo(map);
    }

</script>
